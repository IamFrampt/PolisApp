@using Newtonsoft.Json;
@using PolisApp.Models;
@using static PolisApp.Pages.Index;
@inject HttpClient client;

<MudSelect T="string" Label="Städer" SelectAll="true" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options">
    @foreach (var state in swedishCities)
    {
        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
    }
</MudSelect>

<MudButton Variant="Variant.Filled" Disabled="@_processing" Class="my-3" type="button" @onclick="GettingAllCrimesFromSelectedCities">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Hämtar brott</MudText>
    }
    else
    {
        <MudText>Sök efter brott</MudText>
    }
</MudButton>

@code {

    public List<CrimeDTO> crimeList = new();
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { };
    private string selectedOptionsString { get; set; } = "";

    string[] swedishCities = {
    "Ale",
    "Alingsås",
    "Alvesta",
    "Aneby",
    "Arboga",
    "Arjeplog",
    "Arvidsjaur",
    "Arvika",
    "Askersund",
    "Avesta",
    "Bengtsfors",
    "Berg",
    "Bjurholm",
    "Bjuv",
    "Boden",
    "Bollebygd",
    "Bollnäs",
    "Borgholm",
    "Borlänge",
    "Borås",
    "Botkyrka",
    "Boxholm",
    "Bromölla",
    "Bräcke",
    "Burlöv",
    "Båstad",
    "Dals-Ed",
    "Danderyd",
    "Degerfors",
    "Dorotea",
    "Eda",
    "Ekerö",
    "Eksjö",
    "Emmaboda",
    "Enköping",
    "Eskilstuna",
    "Eslöv",
    "Essunga",
    "Fagersta",
    "Falkenberg",
    "Falköping",
    "Falun",
    "Filipstad",
    "Finspång",
    "Flen",
    "Forshaga",
    "Färgelanda",
    "Gagnef",
    "Gislaved",
    "Gnesta",
    "Gnosjö",
    "Gotland",
    "Grums",
    "Grästorp",
    "Gullspång",
    "Gällivare",
    "Gävle",
    "Göteborg",
    "Götene",
    "Habo",
    "Hagfors",
    "Hallsberg",
    "Hallstahammar",
    "Halmstad",
    "Hammarö",
    "Haninge",
    "Haparanda",
    "Heby",
    "Hedemora",
    "Helsingborg",
    "Herrljunga",
    "Hjo",
    "Hofors",
    "Huddinge",
    "Hudiksvall",
    "Hultsfred",
    "Hylte",
    "Håbo",
    "Hällefors",
    "Härjedalen",
    "Härnösand",
    "Härryda",
    "Hässleholm",
    "Höganäs",
    "Högsby",
    "Hörby",
    "Höör",
    "Jokkmokk",
    "Järfälla",
    "Jönköping",
    "Kalix",
    "Kalmar",
    "Karlsborg",
    "Karlshamn",
    "Karlskoga",
    "Karlskrona",
    "Karlstad",
    "Katrineholm",
    "Kil",
    "Kinda",
    "Kiruna",
    "Klippan",
    "Knivsta",
    "Kramfors",
    "Kristianstad",
    "Kristinehamn",
    "Krokom",
    "Kumla",
    "Kungsbacka",
    "Kungsör",
    "Kungälv",
    "Kävlinge",
    "Köping",
    "Laholm",
    "Landskrona",
    "Laxå",
    "Lekeberg",
    "Leksand",
    "Lerum",
    "Lessebo",
    "Lidingö",
    "Lidköping",
    "Lilla Edet",
    "Lindesberg",
    "Linköping",
    "Ljungby",
    "Ljusdal",
    "Ljusnarsberg",
    "Lomma",
    "Ludvika",
    "Luleå",
    "Lund",
    "Lycksele",
    "Lysekil",
    "Lärbro",
    "Länghem",
    "Löddeköpinge",
    "Malmö",
    "Malung-Sälen",
    "Mariestad",
    "Mark",
    "Markaryd",
    "Mellerud",
    "Mjölby",
    "Mora",
    "Motala",
    "Mullsjö",
    "Munkedal",
    "Munkfors",
    "Mölndal",
    "Mönsterås",
    "Mörbylånga",
    "Nacka",
    "Nora",
    "Norberg",
    "Nordanstig",
    "Nordmaling",
    "Norrköping",
    "Norrtälje",
    "Norsjö",
    "Nybro",
    "Nykvarn",
    "Nyköping",
    "Nynäshamn",
    "Nässjö",
    "Ockelbo",
    "Olofström",
    "Orsa",
    "Osby",
    "Oskarshamn",
    "Ovanåker",
    "Oxelösund",
    "Pajala",
    "Partille",
    "Perstorp",
    "Piteå",
    "Ragunda",
    "Robertsfors",
    "Ronneby",
    "Rättvik",
    "Sala",
    "Salem",
    "Sandviken",
    "Sigtuna",
    "Simrishamn",
    "Sjöbo",
    "Skara",
    "Skellefteå",
    "Skinnskatteberg",
    "Skurup",
    "Skövde",
    "Smedjebacken",
    "Sollefteå",
    "Sollentuna",
    "Solna",
    "Sorsele",
    "Sotenäs",
    "Staffanstorp",
    "Stenungsund",
    "Stockholm",
    "Storfors",
    "Storuman",
    "Strängnäs",
    "Strömstad",
    "Strömsund",
    "Sundbyberg",
    "Sundsvall",
    "Sunne",
    "Surahammar",
    "Svalöv",
    "Svedala",
    "Svenljunga",
    "Säffle",
    "Säter",
    "Sävsjö",
    "Söderhamn",
    "Söderköping",
    "Södertälje",
    "Sölvesborg",
    "Tanum",
    "Tibro",
    "Tidaholm",
    "Tierp",
    "Timrå",
    "Tingsryd",
    "Tjörn",
    "Tomelilla",
    "Torsby",
    "Torsås",
    "Tranemo",
    "Tranås",
    "Trelleborg",
    "Trollhättan",
    "Trosa",
    "Tyresö",
    "Täby",
    "Töreboda",
    "Uddevalla",
    "Ulricehamn",
    "Umeå",
    "Upplands Väsby",
    "Upplands-Bro",
    "Uppsala",
    "Vadstena",
    "Vaggeryd",
    "Valdemarsvik",
    "Vallentuna",
    "Vansbro",
    "Vara",
    "Varberg",
    "Vaxholm",
    "Vellinge",
    "Vetlanda",
    "Vimmerby",
    "Vindeln",
    "Vingåker",
    "Vårgårda",
    "Vänersborg",
    "Vännäs",
    "Värmdö",
    "Värnamo",
    "Västervik",
    "Västerås",
    "Växjö",
    "Ydre",
    "Ystad",
    "Åmål",
    "Ånge",
    "Åre",
    "Årjäng",
    "Åsele",
    "Åstorp",
    "Åtvidaberg",
    "Älmhult",
    "Älvdalen",
    "Älvkarleby",
    "Älvsbyn",
    "Ängelholm",
    "Öckerö",
    "Ödeshög",
    "Örebro",
    "Örkelljunga",
    "Örnsköldsvik",
    "Östersund",
    "Österåker",
    "Östhammar",
    "Östra Göinge"
};

    private bool _processing = false;

    [Parameter]
    public EventCallback<List<CrimeDTO>> crimeListChanged { get; set; }


    private async Task GettingAllCrimesFromSelectedCities()
    {
        try
        {
            _processing = true;
            selectedOptionsString =string.Join(";", options);
            var res = await client.GetAsync($"https://polisapi.internal.gentlebush-8ad4885e.westeurope.azurecontainerapps.io/Stad?searchWord={selectedOptionsString}");

            if (!res.IsSuccessStatusCode)
            {
                res = await client.GetAsync($"http://host.docker.internal:8081/Stad?searchWord={selectedOptionsString}");
            }

            var content = await res.Content.ReadAsStringAsync();
            crimeList = JsonConvert.DeserializeObject<List<CrimeDTO>>(content);
            crimeListChanged.InvokeAsync(crimeList);
            _processing = false;
        }
        catch
        {
            crimeList = null;
        }
    }

}